{"ast":null,"code":"import _toConsumableArray from \"/Users/kedwin243/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/kedwin243/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kedwin243/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/kedwin243/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/kedwin243/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kedwin243/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/kedwin243/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/kedwin243/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kedwin243/nft-marketplace-starter-kit/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json';\nimport { MDBCard, MDBTitle, MDBCardText, MDBImage, MDBtn, MDBCardImage, MDBCardTitle, MDBCardBody } from 'mdb-react-ui-kit';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() //First we need to detect an ethereum provider\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                //modern browsers\n                //if there is a provider then lets log that it's working and \n                //access the window from the doc to set web3 to the provider\n                if (provider) {\n                  console.log('ethereum wallet is connected');\n                  window.web3 = new Web3(provider);\n                } else {\n                  //no ethereum provider\n                  console.log('no ethereum wallet detected');\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, abi, address, contract, totalSupply, i, _KryptoBird;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts[0]\n                }); //console.log(this.state.account)\n                //web3 js library\n\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                //from the Json file, netwokData(Json representation of our contract) \n                //basically connect networkId(web3)\n                networkData = KryptoBird.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 30;\n                  break;\n                }\n\n                //1. Create a var abi to set Kryptobird abi\n                //2. Create a var address set to networkData\n                //3. Create a var contract which grabs a new instance\n                //of web3 eth contract\n                //4. Log in the console the var contract successfully\n                abi = KryptoBird.abi;\n                address = networkData.address;\n                contract = new web3.eth.Contract(abi, address); //console.log(contract);\n                //it suppose to be ({contract:contract}) but our variable and state \n                //have the same name so we can write it once\n\n                this.setState({\n                  contract: contract\n                }); //console.log(this.state.contract)  \n\n                _context3.next = 16;\n                return contract.methods.totalSupply().call();\n\n              case 16:\n                totalSupply = _context3.sent;\n                this.setState({\n                  totalSupply: totalSupply\n                }); //console.log(this.state.totalSupply)\n                //set up an array to keep track of tokens\n                //load KryptoBirdz\n\n                i = 1;\n\n              case 19:\n                if (!(i <= totalSupply)) {\n                  _context3.next = 27;\n                  break;\n                }\n\n                _context3.next = 22;\n                return contract.methods.kryptoBirdz(i - 1).call();\n\n              case 22:\n                _KryptoBird = _context3.sent;\n                //the state here is our array, so we're setting to the array\n                //the spread operator right here help us update the state before\n                //merging to the var\n                //Also we add this.state to kryptoBirdz because it is coming the state\n                this.setState({\n                  kryptoBirdz: [].concat(_toConsumableArray(this.state.kryptoBirdz), [_KryptoBird])\n                });\n\n              case 24:\n                i++;\n                _context3.next = 19;\n                break;\n\n              case 27:\n                console.log(this.state.kryptoBirdz);\n                _context3.next = 31;\n                break;\n\n              case 30:\n                window.alert('smart contract non-deployed');\n\n              case 31:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }() //with minting we're sending info and we need to specify the account\n\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.mint = function (kryptoBird) {\n      _this.state.contract.methods.mint(kryptoBird).send({\n        from: _this.state.account\n      }).once('receipt', function (receipt) {\n        _this.setState({\n          kryptoBirdz: [].concat(_toConsumableArray(_this.state.kryptoBirdz), [KryptoBird])\n        });\n      });\n    };\n\n    _this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      kryptoBirdz: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top  bg-dark flex-md-nowrap p-0 shadow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"navbar-brand col-sm-3 col-md-3 mr-0\",\n        style: {\n          color: 'white'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }\n      }, \"Krypto Birdz NFTs\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"navbar-bar px-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        className: \"nav-item text-nowrap d-none d-sm-none d-sm-block\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"small\", {\n        className: \"text-white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 29\n        }\n      }, this.state.account)))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        style: {\n          opacity: '0.8'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        style: {\n          color: 'white'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 33\n        }\n      }, \"KryptoBirdz - NFT Marketplace\"), /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault(); //this.kryptoBird.value comes from ref on line 138\n\n          var kryptoBird = _this2.kryptoBird.value;\n\n          _this2.mint(kryptoBird);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"name\",\n        className: \"form-control mb-1\" //ref run an anonymous function which takes \n        //the input as an argument and set\n        //the kryptobird to equal that value\n        ,\n        ref: function ref(input) {\n          return _this2.kryptoBird = input;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 37\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        style: {\n          margin: '6px'\n        },\n        type: \"submit\",\n        className: \"btn btn-primary btn-black\",\n        value: \"MINT\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 37\n        }\n      }))))), /*#__PURE__*/React.createElement(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row textcenter\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 25\n        }\n      }, this.state.kryptoBirdz.map(function (kryptoBird, key) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(MDBCard, {\n          className: \"token img\",\n          style: {\n            maxWidth: '22rem'\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 45\n          }\n        }), /*#__PURE__*/React.createElement(MDBCardImage, {\n          src: kryptoBird,\n          position: \"top\",\n          height: \"250rem\",\n          style: {\n            marginRight: '4px'\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 45\n          }\n        }), /*#__PURE__*/React.createElement(MDBCardBody, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(MDBCardTitle, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 45\n          }\n        }, \" KryptoBirdz \"), /*#__PURE__*/React.createElement(MDBCardText, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 45\n          }\n        }, \" The KryptoBirdz are the first ever birz created from a digital source! Only one of this unique bird can be one by user\"), /*#__PURE__*/React.createElement(MDBBtn, {\n          href: kryptoBird,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 45\n          }\n        }, \"Download\"))));\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App; //hr gives some space for lining, it means horizontal rule\n//mapping in JS can iterate and create our keys. It can grap info\n//and pass it over\n//The MDBtitle can be dynamic so that we can propagate different type of names\n//Same for the description\n//MTBtn is just a download for users to download the image format of the NFT","map":{"version":3,"sources":["/Users/kedwin243/nft-marketplace-starter-kit/src/components/App.js"],"names":["React","Component","Web3","detectEthereumProvider","KryptoBird","MDBCard","MDBTitle","MDBCardText","MDBImage","MDBtn","MDBCardImage","MDBCardTitle","MDBCardBody","App","loadWeb3","loadBlockchainData","provider","console","log","window","web3","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","abi","address","contract","Contract","methods","totalSupply","call","i","kryptoBirdz","state","alert","props","mint","kryptoBird","send","from","once","receipt","color","opacity","event","preventDefault","value","input","margin","map","key","maxWidth","marginRight"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\"; \nimport KryptoBird from '../abis/KryptoBird.json';\nimport {MDBCard, MDBTitle, MDBCardText, MDBImage, MDBtn, MDBCardImage, MDBCardTitle, MDBCardBody} from 'mdb-react-ui-kit';\n\n\nclass App extends Component {\n\n    async componentDidMount() {\n        await this.loadWeb3();\n        await this.loadBlockchainData();\n    }\n\n    //First we need to detect an ethereum provider\n    async loadWeb3 () {\n        const provider = await detectEthereumProvider();\n\n        //modern browsers\n        //if there is a provider then lets log that it's working and \n        //access the window from the doc to set web3 to the provider\n\n        if(provider) {\n            console.log('ethereum wallet is connected')\n            window.web3 = new Web3(provider)\n        } else {\n            //no ethereum provider\n            console.log('no ethereum wallet detected')\n        }\n    }\n    \n    async loadBlockchainData() {\n        const web3 = window.web3\n        const accounts = await web3.eth.getAccounts()\n        this.setState({account:accounts[0]})\n        //console.log(this.state.account)\n        //web3 js library\n        const networkId = await web3.eth.net.getId()\n        //from the Json file, netwokData(Json representation of our contract) \n        //basically connect networkId(web3)\n        const networkData = KryptoBird.networks[networkId]\n        if(networkData) {\n            //1. Create a var abi to set Kryptobird abi\n            //2. Create a var address set to networkData\n            //3. Create a var contract which grabs a new instance\n            //of web3 eth contract\n            //4. Log in the console the var contract successfully\n            const abi = KryptoBird.abi;\n            const address = networkData.address;\n            const contract = new web3.eth.Contract(abi, address);\n            \n            //console.log(contract);\n            //it suppose to be ({contract:contract}) but our variable and state \n            //have the same name so we can write it once\n            this.setState({contract})\n            //console.log(this.state.contract)  \n            \n            const totalSupply = await contract.methods.totalSupply().call()\n            this.setState({totalSupply})\n            //console.log(this.state.totalSupply)\n\n            //set up an array to keep track of tokens\n            //load KryptoBirdz\n            for(let i=1; i <= totalSupply; i++) {\n                const KryptoBird = await contract.methods.kryptoBirdz(i-1).call()\n                //the state here is our array, so we're setting to the array\n                //the spread operator right here help us update the state before\n                //merging to the var\n                //Also we add this.state to kryptoBirdz because it is coming the state\n                this.setState({\n                    kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]})\n            }\n            console.log(this.state.kryptoBirdz)\n            \n\n        } else {\n            window.alert('smart contract non-deployed')\n        }\n    }\n    //with minting we're sending info and we need to specify the account\n\n    mint = (kryptoBird) => {\n        this.state.contract.methods.mint(kryptoBird).send({from:this.state.account})\n        .once('receipt', (receipt)=> {\n            this.setState({\n                kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]})\n\n        })\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            account: '',\n            contract:null,\n            totalSupply:0,\n            kryptoBirdz:[]\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <nav className='navbar navbar-dark fixed-top \n                bg-dark flex-md-nowrap p-0 shadow'>\n                    <div className='navbar-brand col-sm-3 col-md-3 mr-0'\n                    style={{color:'white'}}>\n                        Krypto Birdz NFTs     \n                    </div>\n                    <ul className='navbar-bar px-3'>\n                        <li className='nav-item text-nowrap d-none d-sm-none\n                        d-sm-block'>\n                            <small className='text-white'>\n                                {this.state.account}\n                            </small>\n\n                        </li>\n                    </ul>\n                </nav>\n                <div className='container-fluid mt-1'>\n                    <div className='row'>\n                        <main role='main' \n                        className='col-lg-12 d-flex text-center'>\n                            <div className='content mr-auto ml-auto'\n                            style={{opacity:'0.8'}}>\n                                <h1 style={{color:'white'}}>KryptoBirdz - NFT Marketplace</h1>\n                                <form onSubmit={(event)=>{\n                                    event.preventDefault()\n                                //this.kryptoBird.value comes from ref on line 138\n                                const kryptoBird = this.kryptoBird.value\n                                this.mint(kryptoBird)\n                                }}>\n                                    <input\n                                    type ='text'\n                                    placeholder = 'name'\n                                    className='form-control mb-1'\n                                    //ref run an anonymous function which takes \n                                    //the input as an argument and set\n                                    //the kryptobird to equal that value\n                                    ref={(input)=>this.kryptoBird = input}\n                                    />\n                                    <input style={{margin:'6px'}}\n                                    type='submit'\n                                    className='btn btn-primary btn-black'\n                                    value='MINT'\n                                    />                                \n                                </form>\n                            </div>\n                        </main>\n                    </div>\n                        <hr></hr>\n                        <div className='row textcenter'>\n                            {this.state.kryptoBirdz.map((kryptoBird, key)=>{\n                                return(\n                                    <div>\n                                        <div>\n                                            <MDBCard className='token img' style={{maxWidth:'22rem'}}/>\n                                            <MDBCardImage src={kryptoBird} position='top' height='250rem'\n                                            style={{marginRight:'4px'}}/>\n                                            <MDBCardBody>\n                                            <MDBCardTitle> KryptoBirdz </MDBCardTitle>\n                                            <MDBCardText> The KryptoBirdz are the first ever birz \n                                                created from a digital source! Only one of this unique bird can \n                                                be one by user</MDBCardText>\n                                            <MDBBtn href={kryptoBird}>Download</MDBBtn>\n                                            </MDBCardBody>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                        </div>                   \n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n//hr gives some space for lining, it means horizontal rule\n//mapping in JS can iterate and create our keys. It can grap info\n//and pass it over\n//The MDBtitle can be dynamic so that we can propagate different type of names\n//Same for the description\n//MTBtn is just a download for users to download the image format of the NFT"]},"metadata":{},"sourceType":"module"}